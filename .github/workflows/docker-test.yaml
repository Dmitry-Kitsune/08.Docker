name: Docker Image Test Workflow

on:
  workflow_dispatch:
    inputs:
      imageToBuild:
        description: 'Component to build'
        required: true
        default: 'nodejs'
      tagImage:
        description: 'Tag for the Docker image'
        required: true
        default: 'latest'

jobs:
  test_image:
    name: Test Docker Image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      # Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Build Docker Image
      - name: Build Docker Image
        run: |
          docker build --file ./${{ github.event.inputs.imageToBuild }}/Dockerfile \
            --tag ghcr.io/dmitry-kitsune/${{ github.event.inputs.imageToBuild }}:${{ github.event.inputs.tagImage }} \
            ./${{ github.event.inputs.imageToBuild }}

      # Run Docker Container for Testing
      - name: Run Docker Container
        run: |
          docker run --name test-${{ github.event.inputs.imageToBuild }} -p 8080:80 -d \
            ghcr.io/dmitry-kitsune/${{ github.event.inputs.imageToBuild }}:${{ github.event.inputs.tagImage }}

      # Install curl (if needed)
      - name: Install curl
        run: sudo apt-get install -y curl

      # Step 6: Test if the container serves data
      - name: Test Request Data
        run: |
          sleep 5 # Allow container time to initialize
          curl -s http://localhost:8080 || (echo "Container failed to respond!" && exit 1)

      # Verify Non-Root Access
      - name: Non-Root Check
        uses: wetransform/gha-docker-nonroot@v1.0.3
        with:
          image-ref: ghcr.io/dmitry-kitsune/${{ github.event.inputs.imageToBuild }}:${{ github.event.inputs.tagImage }}
          fail-for-root: true

      # Stop and Remove Container
      - name: Cleanup
        if: always()
        run: |
          docker stop test-${{ github.event.inputs.imageToBuild }}
          docker rm test-${{ github.event.inputs.imageToBuild }}

  notification:
    needs: test_image
    runs-on: ubuntu-latest
    steps:
      # Send Slack Notification
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: all-slack
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: "Docker image test completed for ghcr.io/dmitry-kitsune/${{ github.event.inputs.imageToBuild }}:${{ github.event.inputs.tagImage }}"
          SLACK_TITLE: Docker Image Test Status
          SLACK_USERNAME: GitHub Actions
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
